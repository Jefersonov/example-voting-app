version: "3" #Primeira: coisa a ser coloca no docker-compose é a versão=do-meu-docker-compose
services:    #Segunda: O Serviços.. embaixo começamos a definir com qual serviços iremos trabalhar.

  redis:                  #Redis é um banco de dados em memória para armazenar caches*
    image: redis:alpine   #Imagem que iremos subir
    networks:             #Networ cria uma interface na para imagem.
      - frontend          #Nome da interface criada.
    deploy:               #Especifica a configuração relacionada à implementação.
      replicas: 1         #Deploy está especificando o numeros de réplicas a serem criadas para rodar o container nesse caso 1 
      update_config:      #o número de contêineres a serem atualizados por vez.
        parallelism: 2    #Nesse caso está 2 containers por vez
        delay: 10s        #o tempo de espera entre a atualização de um grupo de contêineres.
      restart_policy:     #serviço para reinciar um container caso de falha ou não subir.
        condition: on-failure  #A condição para on-failure política reinicia um contêiner se o código de saída indicar um erro de falha
  db:                       #db serviço do banco de dados.
    image: postgres:9.4     #Imagem do banco Postgres 9.4
    environment:            #environment: usado para chamar uma variável. 
      POSTGRES_USER: "postgres"    #nesse caso a váriabel USER
      POSTGRES_PASSWORD: "postgres" #E variável PASSWORD
    volumes:                             #Volumes a serem criados
      - db-data:/var/lib/postgresql/data #local onde iremos criar o volume especificado.
    networks:                          #Criando a rede com nome abaixo backend.
      - backend
    deploy:                         #Deploy especificando o serviço placement 
      placement:                     #Especifique a colocação de restrições e preferências. 
        constraints: [node.role == manager]  #Serviço de constraints
  vote:                                           #serviço
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:

volumes:
  db-data:
